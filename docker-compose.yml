services:
  postgres:
    image: postgres:16
    ports:
      - "5430:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: template
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    image: origin-backend
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "49951:50051"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ENVIRONMENT=local
      - GRPC_ADDR=[::0]:50051
      - HTTP_ADDR=[::0]:8081
      - RUST_LOG=info
      - GOOGLE_OAUTH_CLIENT_ID=1002179668712-3uplblsht9v1h7tds5o666v3bprsbm3t.apps.googleusercontent.com
      - GOOGLE_OAUTH_CLIENT_SECRET=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
      # Fallback values for local development (Parameter Store preferred)
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/template
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=oiKSa/assPDgureWiHlywfRZJHQ1pDByzcpJyTeiqK1A/IOPTgCsBuYjWhKw9kOp/t8/4gudodkB1lzY4Ve9qg==
    networks:
      - app-network

  envoy:
    hostname: envoy
    image: origin-envoy
    build:
      context: ./backend/envoy
      dockerfile: Dockerfile
    ports:
      - "49999:8080"
    networks:
      - app-network

  frontend:
    image: origin-frontend
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://envoy:8080
    networks:
      - app-network

  storybook:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: builder
    ports:
      - "6006:6006"
    command: npm run storybook
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/package.json:/app/package.json
      - ./frontend/.storybook:/app/.storybook
    restart: unless-stopped
    environment:
      - NODE_ENV=development
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6380:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

