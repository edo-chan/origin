// This file is @generated by prost-build.
/// Request to initiate OAuth flow
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiateOAuthRequest {
    /// Optional custom redirect URI
    #[prost(string, optional, tag = "1")]
    pub redirect_uri: ::core::option::Option<::prost::alloc::string::String>,
    /// Device identification
    #[prost(string, optional, tag = "2")]
    pub device_name: ::core::option::Option<::prost::alloc::string::String>,
}
/// Response with OAuth authorization URL
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitiateOAuthResponse {
    /// Google OAuth authorization URL
    #[prost(string, tag = "1")]
    pub auth_url: ::prost::alloc::string::String,
    /// State token for CSRF protection
    #[prost(string, tag = "2")]
    pub state_token: ::prost::alloc::string::String,
    /// State expiration timestamp
    #[prost(int64, tag = "3")]
    pub expires_at: i64,
}
/// Request to complete OAuth flow
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompleteOAuthRequest {
    /// Authorization code from Google
    #[prost(string, tag = "1")]
    pub code: ::prost::alloc::string::String,
    /// State parameter for CSRF validation
    #[prost(string, tag = "2")]
    pub state: ::prost::alloc::string::String,
    /// JSON string with device information
    #[prost(string, optional, tag = "3")]
    pub device_info: ::core::option::Option<::prost::alloc::string::String>,
    /// Client IP address
    #[prost(string, optional, tag = "4")]
    pub ip_address: ::core::option::Option<::prost::alloc::string::String>,
    /// User agent string
    #[prost(string, optional, tag = "5")]
    pub user_agent: ::core::option::Option<::prost::alloc::string::String>,
}
/// Response with JWT tokens
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompleteOAuthResponse {
    /// JWT access token
    #[prost(string, tag = "1")]
    pub access_token: ::prost::alloc::string::String,
    /// JWT refresh token
    #[prost(string, tag = "2")]
    pub refresh_token: ::prost::alloc::string::String,
    /// Access token expiration
    #[prost(int64, tag = "3")]
    pub access_token_expires_at: i64,
    /// Refresh token expiration
    #[prost(int64, tag = "4")]
    pub refresh_token_expires_at: i64,
    /// "Bearer"
    #[prost(string, tag = "5")]
    pub token_type: ::prost::alloc::string::String,
    /// User profile information
    #[prost(message, optional, tag = "6")]
    pub user: ::core::option::Option<UserProfile>,
    /// Whether this is a newly created user
    #[prost(bool, tag = "7")]
    pub is_new_user: bool,
}
/// Request to refresh access token
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshTokenRequest {
    /// Current refresh token
    #[prost(string, tag = "1")]
    pub refresh_token: ::prost::alloc::string::String,
}
/// Response with new access token
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshTokenResponse {
    /// New JWT access token
    #[prost(string, tag = "1")]
    pub access_token: ::prost::alloc::string::String,
    /// New access token expiration
    #[prost(int64, tag = "2")]
    pub access_token_expires_at: i64,
    /// "Bearer"
    #[prost(string, tag = "3")]
    pub token_type: ::prost::alloc::string::String,
}
/// Request to logout
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogoutRequest {
    /// Current access token
    #[prost(string, tag = "1")]
    pub access_token: ::prost::alloc::string::String,
}
/// Response for logout
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogoutResponse {
    /// Whether logout was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Success/error message
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// Request to logout from all devices
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogoutAllRequest {
    /// Current access token
    #[prost(string, tag = "1")]
    pub access_token: ::prost::alloc::string::String,
}
/// Response for logout all
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogoutAllResponse {
    /// Whether logout was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Number of sessions revoked
    #[prost(int32, tag = "2")]
    pub revoked_sessions: i32,
    /// Success/error message
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
/// Request to validate token
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateTokenRequest {
    /// Access token to validate
    #[prost(string, tag = "1")]
    pub access_token: ::prost::alloc::string::String,
}
/// Response with token validation result
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateTokenResponse {
    /// Whether token is valid
    #[prost(bool, tag = "1")]
    pub valid: bool,
    /// User profile if valid
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<UserProfile>,
    /// Session ID if valid
    #[prost(string, tag = "3")]
    pub session_id: ::prost::alloc::string::String,
    /// Token expiration if valid
    #[prost(int64, tag = "4")]
    pub expires_at: i64,
}
/// Request to get user profile
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProfileRequest {
    /// Access token
    #[prost(string, tag = "1")]
    pub access_token: ::prost::alloc::string::String,
}
/// Response with user profile
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProfileResponse {
    /// User profile information
    #[prost(message, optional, tag = "1")]
    pub user: ::core::option::Option<UserProfile>,
}
/// Request to get user sessions
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserSessionsRequest {
    /// Access token
    #[prost(string, tag = "1")]
    pub access_token: ::prost::alloc::string::String,
}
/// Response with user sessions
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserSessionsResponse {
    /// List of active sessions
    #[prost(message, repeated, tag = "1")]
    pub sessions: ::prost::alloc::vec::Vec<UserSession>,
}
/// Request to revoke a specific session
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevokeSessionRequest {
    /// Access token
    #[prost(string, tag = "1")]
    pub access_token: ::prost::alloc::string::String,
    /// Session ID to revoke
    #[prost(string, tag = "2")]
    pub session_id: ::prost::alloc::string::String,
    /// Reason for revocation
    #[prost(string, optional, tag = "3")]
    pub reason: ::core::option::Option<::prost::alloc::string::String>,
}
/// Response for session revocation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevokeSessionResponse {
    /// Whether revocation was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Success/error message
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
/// User profile information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserProfile {
    /// User UUID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Google OAuth ID
    #[prost(string, tag = "2")]
    pub google_id: ::prost::alloc::string::String,
    /// User email
    #[prost(string, tag = "3")]
    pub email: ::prost::alloc::string::String,
    /// Display name
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    /// First name
    #[prost(string, optional, tag = "5")]
    pub given_name: ::core::option::Option<::prost::alloc::string::String>,
    /// Last name
    #[prost(string, optional, tag = "6")]
    pub family_name: ::core::option::Option<::prost::alloc::string::String>,
    /// Profile picture URL
    #[prost(string, optional, tag = "7")]
    pub picture_url: ::core::option::Option<::prost::alloc::string::String>,
    /// User locale
    #[prost(string, optional, tag = "8")]
    pub locale: ::core::option::Option<::prost::alloc::string::String>,
    /// Whether account is active
    #[prost(bool, tag = "9")]
    pub is_active: bool,
    /// Whether account is verified
    #[prost(bool, tag = "10")]
    pub is_verified: bool,
    /// Account creation timestamp (Unix timestamp)
    #[prost(int64, tag = "11")]
    pub created_at: i64,
    /// Last update timestamp (Unix timestamp)
    #[prost(int64, tag = "12")]
    pub updated_at: i64,
    /// Last login timestamp (Unix timestamp)
    #[prost(int64, optional, tag = "13")]
    pub last_login_at: ::core::option::Option<i64>,
    /// JSON string with user preferences
    #[prost(string, tag = "14")]
    pub preferences: ::prost::alloc::string::String,
}
/// User session information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserSession {
    /// Session UUID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// JSON string with device information
    #[prost(string, tag = "2")]
    pub device_info: ::prost::alloc::string::String,
    /// IP address
    #[prost(string, optional, tag = "3")]
    pub ip_address: ::core::option::Option<::prost::alloc::string::String>,
    /// User agent string
    #[prost(string, optional, tag = "4")]
    pub user_agent: ::core::option::Option<::prost::alloc::string::String>,
    /// Session creation timestamp (Unix timestamp)
    #[prost(int64, tag = "5")]
    pub created_at: i64,
    /// Last activity timestamp (Unix timestamp)
    #[prost(int64, tag = "6")]
    pub last_activity_at: i64,
    /// Session expiration timestamp (Unix timestamp)
    #[prost(int64, tag = "7")]
    pub expires_at: i64,
    /// Whether this is the current session
    #[prost(bool, tag = "8")]
    pub is_current: bool,
}
/// Request to send OTP to email
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendOtpRequest {
    /// Email address to send OTP to
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
}
/// Response for sending OTP
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendOtpResponse {
    /// Whether OTP was sent successfully
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Success/error message
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// OTP expiration timestamp
    #[prost(int64, tag = "3")]
    pub expires_at: i64,
    /// Number of verification attempts allowed
    #[prost(int32, tag = "4")]
    pub attempts_allowed: i32,
}
/// Request to verify OTP
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifyOtpRequest {
    /// Email address
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    /// OTP code to verify
    #[prost(string, tag = "2")]
    pub code: ::prost::alloc::string::String,
    /// JSON string with device information
    #[prost(string, optional, tag = "3")]
    pub device_info: ::core::option::Option<::prost::alloc::string::String>,
    /// Client IP address
    #[prost(string, optional, tag = "4")]
    pub ip_address: ::core::option::Option<::prost::alloc::string::String>,
    /// User agent string
    #[prost(string, optional, tag = "5")]
    pub user_agent: ::core::option::Option<::prost::alloc::string::String>,
}
/// Response for OTP verification
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifyOtpResponse {
    /// Whether verification was successful
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Success/error message
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// JWT access token (if successful)
    #[prost(string, optional, tag = "3")]
    pub access_token: ::core::option::Option<::prost::alloc::string::String>,
    /// JWT refresh token (if successful)
    #[prost(string, optional, tag = "4")]
    pub refresh_token: ::core::option::Option<::prost::alloc::string::String>,
    /// Access token expiration
    #[prost(int64, optional, tag = "5")]
    pub access_token_expires_at: ::core::option::Option<i64>,
    /// Refresh token expiration
    #[prost(int64, optional, tag = "6")]
    pub refresh_token_expires_at: ::core::option::Option<i64>,
    /// "Bearer" (if successful)
    #[prost(string, optional, tag = "7")]
    pub token_type: ::core::option::Option<::prost::alloc::string::String>,
    /// User profile information (if successful)
    #[prost(message, optional, tag = "8")]
    pub user: ::core::option::Option<UserProfile>,
    /// Whether this is a newly created user
    #[prost(bool, tag = "9")]
    pub is_new_user: bool,
    /// Remaining verification attempts
    #[prost(int32, tag = "10")]
    pub attempts_remaining: i32,
}
/// Generated client implementations.
pub mod auth_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Authentication service definition
    #[derive(Debug, Clone)]
    pub struct AuthServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> AuthServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AuthServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            AuthServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Initiate Google OAuth flow
        pub async fn initiate_google_o_auth(
            &mut self,
            request: impl tonic::IntoRequest<super::InitiateOAuthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InitiateOAuthResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.AuthService/InitiateGoogleOAuth",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.AuthService", "InitiateGoogleOAuth"));
            self.inner.unary(req, path, codec).await
        }
        /// Complete Google OAuth flow (callback handler)
        pub async fn complete_google_o_auth(
            &mut self,
            request: impl tonic::IntoRequest<super::CompleteOAuthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CompleteOAuthResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.AuthService/CompleteGoogleOAuth",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.AuthService", "CompleteGoogleOAuth"));
            self.inner.unary(req, path, codec).await
        }
        /// Refresh access token using refresh token
        pub async fn refresh_token(
            &mut self,
            request: impl tonic::IntoRequest<super::RefreshTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RefreshTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.AuthService/RefreshToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.AuthService", "RefreshToken"));
            self.inner.unary(req, path, codec).await
        }
        /// Logout (invalidate session)
        pub async fn logout(
            &mut self,
            request: impl tonic::IntoRequest<super::LogoutRequest>,
        ) -> std::result::Result<tonic::Response<super::LogoutResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/auth.AuthService/Logout");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("auth.AuthService", "Logout"));
            self.inner.unary(req, path, codec).await
        }
        /// Logout from all devices
        pub async fn logout_all(
            &mut self,
            request: impl tonic::IntoRequest<super::LogoutAllRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LogoutAllResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.AuthService/LogoutAll",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.AuthService", "LogoutAll"));
            self.inner.unary(req, path, codec).await
        }
        /// Validate access token (for middleware)
        pub async fn validate_token(
            &mut self,
            request: impl tonic::IntoRequest<super::ValidateTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.AuthService/ValidateToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.AuthService", "ValidateToken"));
            self.inner.unary(req, path, codec).await
        }
        /// Get user profile
        pub async fn get_profile(
            &mut self,
            request: impl tonic::IntoRequest<super::GetProfileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetProfileResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.AuthService/GetProfile",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.AuthService", "GetProfile"));
            self.inner.unary(req, path, codec).await
        }
        /// Get user sessions (for security dashboard)
        pub async fn get_user_sessions(
            &mut self,
            request: impl tonic::IntoRequest<super::GetUserSessionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserSessionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.AuthService/GetUserSessions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.AuthService", "GetUserSessions"));
            self.inner.unary(req, path, codec).await
        }
        /// Revoke specific session
        pub async fn revoke_session(
            &mut self,
            request: impl tonic::IntoRequest<super::RevokeSessionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RevokeSessionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.AuthService/RevokeSession",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.AuthService", "RevokeSession"));
            self.inner.unary(req, path, codec).await
        }
        /// Send OTP to email
        pub async fn send_otp(
            &mut self,
            request: impl tonic::IntoRequest<super::SendOtpRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SendOtpResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/auth.AuthService/SendOtp");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("auth.AuthService", "SendOtp"));
            self.inner.unary(req, path, codec).await
        }
        /// Verify OTP and login
        pub async fn verify_otp(
            &mut self,
            request: impl tonic::IntoRequest<super::VerifyOtpRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VerifyOtpResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/auth.AuthService/VerifyOtp",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("auth.AuthService", "VerifyOtp"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod auth_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AuthServiceServer.
    #[async_trait]
    pub trait AuthService: Send + Sync + 'static {
        /// Initiate Google OAuth flow
        async fn initiate_google_o_auth(
            &self,
            request: tonic::Request<super::InitiateOAuthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InitiateOAuthResponse>,
            tonic::Status,
        >;
        /// Complete Google OAuth flow (callback handler)
        async fn complete_google_o_auth(
            &self,
            request: tonic::Request<super::CompleteOAuthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CompleteOAuthResponse>,
            tonic::Status,
        >;
        /// Refresh access token using refresh token
        async fn refresh_token(
            &self,
            request: tonic::Request<super::RefreshTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RefreshTokenResponse>,
            tonic::Status,
        >;
        /// Logout (invalidate session)
        async fn logout(
            &self,
            request: tonic::Request<super::LogoutRequest>,
        ) -> std::result::Result<tonic::Response<super::LogoutResponse>, tonic::Status>;
        /// Logout from all devices
        async fn logout_all(
            &self,
            request: tonic::Request<super::LogoutAllRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LogoutAllResponse>,
            tonic::Status,
        >;
        /// Validate access token (for middleware)
        async fn validate_token(
            &self,
            request: tonic::Request<super::ValidateTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateTokenResponse>,
            tonic::Status,
        >;
        /// Get user profile
        async fn get_profile(
            &self,
            request: tonic::Request<super::GetProfileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetProfileResponse>,
            tonic::Status,
        >;
        /// Get user sessions (for security dashboard)
        async fn get_user_sessions(
            &self,
            request: tonic::Request<super::GetUserSessionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserSessionsResponse>,
            tonic::Status,
        >;
        /// Revoke specific session
        async fn revoke_session(
            &self,
            request: tonic::Request<super::RevokeSessionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RevokeSessionResponse>,
            tonic::Status,
        >;
        /// Send OTP to email
        async fn send_otp(
            &self,
            request: tonic::Request<super::SendOtpRequest>,
        ) -> std::result::Result<tonic::Response<super::SendOtpResponse>, tonic::Status>;
        /// Verify OTP and login
        async fn verify_otp(
            &self,
            request: tonic::Request<super::VerifyOtpRequest>,
        ) -> std::result::Result<
            tonic::Response<super::VerifyOtpResponse>,
            tonic::Status,
        >;
    }
    /// Authentication service definition
    #[derive(Debug)]
    pub struct AuthServiceServer<T: AuthService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: AuthService> AuthServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for AuthServiceServer<T>
    where
        T: AuthService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/auth.AuthService/InitiateGoogleOAuth" => {
                    #[allow(non_camel_case_types)]
                    struct InitiateGoogleOAuthSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::InitiateOAuthRequest>
                    for InitiateGoogleOAuthSvc<T> {
                        type Response = super::InitiateOAuthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InitiateOAuthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::initiate_google_o_auth(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = InitiateGoogleOAuthSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/auth.AuthService/CompleteGoogleOAuth" => {
                    #[allow(non_camel_case_types)]
                    struct CompleteGoogleOAuthSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::CompleteOAuthRequest>
                    for CompleteGoogleOAuthSvc<T> {
                        type Response = super::CompleteOAuthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CompleteOAuthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::complete_google_o_auth(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CompleteGoogleOAuthSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/auth.AuthService/RefreshToken" => {
                    #[allow(non_camel_case_types)]
                    struct RefreshTokenSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::RefreshTokenRequest>
                    for RefreshTokenSvc<T> {
                        type Response = super::RefreshTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RefreshTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::refresh_token(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RefreshTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/auth.AuthService/Logout" => {
                    #[allow(non_camel_case_types)]
                    struct LogoutSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::LogoutRequest>
                    for LogoutSvc<T> {
                        type Response = super::LogoutResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LogoutRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::logout(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = LogoutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/auth.AuthService/LogoutAll" => {
                    #[allow(non_camel_case_types)]
                    struct LogoutAllSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::LogoutAllRequest>
                    for LogoutAllSvc<T> {
                        type Response = super::LogoutAllResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LogoutAllRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::logout_all(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = LogoutAllSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/auth.AuthService/ValidateToken" => {
                    #[allow(non_camel_case_types)]
                    struct ValidateTokenSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::ValidateTokenRequest>
                    for ValidateTokenSvc<T> {
                        type Response = super::ValidateTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ValidateTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::validate_token(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ValidateTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/auth.AuthService/GetProfile" => {
                    #[allow(non_camel_case_types)]
                    struct GetProfileSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::GetProfileRequest>
                    for GetProfileSvc<T> {
                        type Response = super::GetProfileResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetProfileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::get_profile(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetProfileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/auth.AuthService/GetUserSessions" => {
                    #[allow(non_camel_case_types)]
                    struct GetUserSessionsSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::GetUserSessionsRequest>
                    for GetUserSessionsSvc<T> {
                        type Response = super::GetUserSessionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetUserSessionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::get_user_sessions(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetUserSessionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/auth.AuthService/RevokeSession" => {
                    #[allow(non_camel_case_types)]
                    struct RevokeSessionSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::RevokeSessionRequest>
                    for RevokeSessionSvc<T> {
                        type Response = super::RevokeSessionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RevokeSessionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::revoke_session(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RevokeSessionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/auth.AuthService/SendOtp" => {
                    #[allow(non_camel_case_types)]
                    struct SendOtpSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::SendOtpRequest>
                    for SendOtpSvc<T> {
                        type Response = super::SendOtpResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SendOtpRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::send_otp(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SendOtpSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/auth.AuthService/VerifyOtp" => {
                    #[allow(non_camel_case_types)]
                    struct VerifyOtpSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::VerifyOtpRequest>
                    for VerifyOtpSvc<T> {
                        type Response = super::VerifyOtpResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VerifyOtpRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::verify_otp(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = VerifyOtpSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: AuthService> Clone for AuthServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: AuthService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: AuthService> tonic::server::NamedService for AuthServiceServer<T> {
        const NAME: &'static str = "auth.AuthService";
    }
}
